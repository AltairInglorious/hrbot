// Code generated by go-bindata.
// sources:
// assets/gts1p5.pem
// DO NOT EDIT!

package bot

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsGts1p5Pem = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x95\x49\xcf\x83\xba\x19\x85\xf7\xfc\x8a\xee\xa3\x2a\x0c\x19\x60\xd1\x85\x6d\x0c\x38\x04\x82\x99\x61\xc7\x14\x86\x24\x40\x42\x82\x03\xbf\xbe\xfa\xbe\xf6\x5e\xdd\xaa\x5d\xd5\xcb\x23\xf9\xe8\x39\xaf\x5f\xf9\xfc\xfd\xe7\x40\xac\x13\xfb\x6f\x08\xbb\x3e\xd1\x08\x02\x3e\xfe\x55\x39\x8b\x10\xad\x53\x11\x02\x92\x57\x03\x46\x20\xa8\x89\x0d\xea\x8b\x1c\x98\x56\x1f\x6c\x91\x5b\xa3\xf3\x5b\xf6\x81\x0d\xeb\xdb\xb3\xb9\xb5\xba\xc2\x78\x08\xe8\xa4\x01\x15\x1a\x16\x9d\x18\x87\x68\xa2\x86\x94\xea\x98\x9d\xc2\x60\xc5\xad\x85\x80\x0e\x84\x00\xa3\xc6\x4a\x5d\x51\x99\x53\xf1\x7b\x27\x9a\xbb\x94\xb1\xcd\x13\xcd\xbe\x17\x7d\x3a\x26\x62\xb8\x12\xfc\xb5\xe8\x8a\x03\xce\x82\xe4\xf7\x02\xf8\x5a\x67\x57\xf8\xc1\x3b\xcd\xb9\x44\xeb\xa0\xc3\xcc\x68\x0a\xdb\xea\x00\xbb\xa8\x78\xb5\x54\xc0\x2c\x95\x2e\xd1\xaf\x56\xb0\x8b\x6f\xb1\x1f\x8d\xfb\x15\x3b\xa8\xff\xe0\xfc\x3f\x34\xdc\x5f\x70\x7c\x0b\xe2\x3f\x68\xcc\x5f\x1a\x6c\x43\xa2\x6a\xd4\xf6\x11\x02\x1e\x61\x2a\x4d\x4e\xe6\x90\x92\x66\x2e\x6c\x40\x31\x84\x14\xa8\x5c\x5d\x63\x07\xfc\x0c\x91\x0e\xa8\xae\x31\x04\xe7\x0b\x92\x91\x67\xcd\x8b\x68\xbc\x8e\xe7\x74\x3c\x1c\x0f\xcb\x6b\xc4\xc2\x7d\xda\x6c\x5f\x67\x69\x7a\x04\x91\x64\xef\xe8\x01\xcb\x6f\xac\x35\x19\x67\x92\xcc\x18\xaa\xfd\x73\x3a\xa8\x69\x19\x28\xdb\x21\x24\xb0\x15\xa2\xc1\xbb\x4f\xba\x67\xd5\x22\x6e\xa3\x57\x7b\xed\x17\x22\x6c\xca\x44\x8f\xf7\xb1\xfd\xdc\x5c\x3e\x4d\x91\xc7\x62\xc1\x13\x9a\x70\x8d\xaf\xda\xfe\x38\x4f\x8e\xdd\xae\xbb\x34\x0f\x64\x39\x38\xa7\xe5\xc7\x99\x0c\xff\xac\x34\xc7\xb5\x72\xf4\xe9\x5e\xc4\x65\x21\x5b\xdf\x96\xe8\x73\x69\x8e\xf3\x96\xae\x1d\x4c\x63\xf6\x75\xa1\xc3\xa5\x91\x73\x18\xcc\xad\xae\xab\x92\x36\x94\x9b\xb8\x2a\x0b\xad\xcd\x2d\x36\x19\xde\xc7\x49\x09\xcd\x76\x2c\x2c\x15\xfe\x0c\xb5\xeb\xb1\xa6\x4e\x79\x68\x09\x2f\x54\x61\x34\xcd\x2a\xee\x02\xfd\xcb\x31\x76\xce\x93\xcf\x02\x78\x47\x11\x05\x92\xdf\x20\x7c\x8a\xef\x9a\xbd\x92\x5e\x53\xc4\x6c\x9b\xca\xe1\xf1\xc0\xe0\xd1\x1c\xe0\xbd\x08\xaf\x08\xf0\xde\x60\xc1\x5d\x46\xfb\x35\xee\x4c\xf4\xce\xb9\xe3\xe2\x90\xe1\x2b\xde\x86\xf5\xf5\xd9\x0e\x4e\x51\xdf\xd8\x7d\xc2\x92\x16\x64\x62\xf5\x50\xec\xbc\xb1\x48\x16\x7d\x6e\x08\x30\x0c\x40\x76\x41\x20\x4e\x58\x5d\x6b\x8b\x05\x76\x3f\x2f\x56\x72\x2a\xc3\x70\xcb\x28\xfe\x59\xe3\xa6\x03\x25\xac\xed\xd0\xf0\x02\xac\x75\x20\x80\x75\xfd\x82\x35\xd6\x20\x2d\x54\x40\x13\x62\xb2\x04\x42\x1a\x18\x80\x11\x86\xeb\x44\x0d\x5d\xde\xe7\x00\x35\xb6\x10\xd4\x0c\xd6\x3f\x46\x04\x02\xf5\xdf\x26\x74\x87\xb5\x9a\x06\xc2\x75\xa9\xd4\x52\xae\x96\x37\x4f\xee\xfb\xf2\x63\xca\xe1\xf5\xeb\xcd\xc2\xf1\x5c\x33\x83\x25\x2a\x17\xba\x7c\x07\x61\xcd\xb4\x01\x04\x7b\x53\x7e\x9d\x7a\x9c\x99\x7c\xdd\x37\x9e\xe2\xa5\xed\x3a\xcb\xe4\xe6\x17\xfe\x8e\x65\xe0\x2f\x04\x14\xe3\x58\x85\x99\x85\x12\x9d\x43\x68\xd2\x01\x0d\x34\xb8\x02\xd8\x34\xe3\x50\x1a\x2e\xbb\xb4\xf2\x9c\x8b\xf6\x5a\xa0\x3d\xcb\xc4\xdb\x27\xfd\x59\xe3\x45\xe9\x4b\xc3\x5e\x2c\x1f\xb0\xbf\x44\x63\x1c\x18\x92\x5b\x66\xb8\x7c\xa1\x0e\xf3\x59\x82\xaf\xcc\xdb\xf7\xb9\xa8\xf4\x67\xe9\x74\x2f\x74\x79\x4e\xc4\x70\x29\x0d\x6b\x4e\x25\x77\x2d\x3a\xfc\x49\xf5\x70\xb1\x54\xfa\x3b\x40\x83\xd1\x37\x67\xa1\x89\x99\x19\xe8\x07\x14\xe9\x44\x6c\xf8\xd2\x00\x87\xf3\xa2\x74\xc5\x83\x7d\x0a\xfd\x3d\x9e\x1f\xe5\x9c\x8b\xc5\x1f\x06\x7f\x1a\x25\xd2\x69\xb2\x30\xaf\x73\x3f\x4e\x04\xb8\xba\x85\x29\xbb\x80\xc4\xfc\xcd\x09\x8c\xa8\xa2\x44\x03\x2b\x78\x5a\xa8\xd6\xff\x8c\xc9\x08\xd4\x9a\xef\x6f\xcc\x62\xfd\x17\x31\xf7\x9f\xc8\xca\x9a\xc5\xee\x5c\xf4\xb7\xd9\x02\xb5\x0e\x1f\x15\x54\x01\x46\xe0\x7f\xfd\x48\xe0\x82\x40\x8d\x01\x97\xeb\x56\x7f\x6c\x9d\xeb\x3e\x3c\x0d\x7e\xa2\x3d\x6e\x49\x7c\xbd\x46\xf1\x3d\x5a\x8b\x2f\x42\xd9\x02\x05\x31\x9b\x5f\x86\x09\xf2\xc7\x7b\xde\x0b\x92\x72\xc7\xa5\xb0\xef\x34\xc4\x3f\x9a\xea\x60\xc4\x1c\x2f\x76\x77\x17\x6c\xce\x9f\x2e\x2f\xe9\x70\x92\xf8\x41\x2a\x15\x7f\x7b\x3c\xc8\xb5\xf1\x38\x39\x9f\xe8\x8d\x04\xa7\xdc\x9f\x0d\x24\x5a\x7e\xf5\xdd\x74\xc6\xbc\xf1\x6f\xaa\x22\x9f\xbd\x35\xa2\x84\x72\x41\xb8\x76\x0c\xcd\xca\x9b\xa5\x24\x88\x77\xa7\xb8\x93\x1d\xc9\xbc\x6e\xee\x9b\x72\xff\xa5\x7b\xdc\xc6\x9d\x96\x85\xb7\x71\x38\x0d\x07\x4f\x4d\xc6\x71\xf4\xfc\xd0\x13\x77\xee\x31\x1e\xef\xaf\xe8\xca\x41\x59\x7c\x3c\xd7\xdd\xd2\x4e\x48\xaf\xe5\x18\xd2\xa2\xbd\x9e\xd7\xe8\xa2\x16\xc0\xa8\x3e\xfa\xb4\x44\x91\xb0\xec\x9e\xbd\x14\x1b\x49\x12\x05\xfb\xc6\x64\x8b\x33\x97\x07\x7b\xd6\xa2\x5e\xa8\x46\x8e\x46\x42\x76\x33\xaf\xf9\xe5\x33\x0a\x35\xf8\x76\x48\xbc\xf3\x39\x2b\x2d\xed\x6a\x49\xa6\x19\xa4\xa3\x7e\x14\x94\x56\xb5\x93\xe3\x69\xf3\x45\xd3\xa9\x4c\xfa\x8c\xf7\xd9\xa7\xb8\xc9\xa2\xfe\xd4\x2b\xce\xb5\x55\xfb\x71\x48\x3a\xa4\x6e\xe2\x21\xab\xaa\xe8\x19\x4b\x28\xf5\xde\x71\x9c\x96\xa6\x96\xbb\xfa\x23\x75\x03\x5a\x1e\xa5\x4e\x64\xcb\x45\x66\x55\x4b\xdf\xf3\xab\x5d\x9b\x39\x3d\x2b\x5b\x24\x70\xfe\x76\x7b\xf9\xce\xbd\xe8\x2c\x43\x8f\x80\x7c\x72\x5a\x3b\xfb\x6e\x6c\x74\x8e\x07\x71\xaf\x8a\xc9\xfd\x01\xf6\x8f\xcb\xcb\x15\x45\xeb\x79\x90\xea\xd3\x14\xec\x9a\x69\x77\x90\xd6\xee\xe0\xc9\x69\x58\x70\xa3\xda\x53\x86\x66\x12\x7c\x63\x81\x6f\x37\x68\xa5\x29\x9f\xee\x1f\xb4\x5c\x0b\xf3\xbe\x48\x9a\x01\x8f\x3c\xaf\xcd\xa3\x56\x39\x4f\x50\xf7\x04\x2b\x85\x5f\xe8\xd1\x76\xb3\x6b\xf3\xa8\x8d\x36\x5c\xc9\xfa\x66\x14\xc7\x0b\x8e\xa3\xbd\x71\x93\xbe\x00\xbe\x9f\x69\xff\xb8\x30\xf1\x98\xe4\x19\x69\x87\x07\xaf\x6d\x96\x75\x91\x43\xf5\x3e\xd8\x46\xd2\xaf\xa1\xb2\x35\xd0\x2b\xf2\x06\x24\xe7\x07\xc6\xf1\x5b\x63\xb7\xba\xe6\x3e\x6b\x23\x1a\x6d\x2e\x1a\xb9\xe4\x82\x38\xbd\x81\x01\x6f\x3c\x01\x76\x53\x1e\xc7\xad\x07\x94\x13\x5a\xfa\xd7\x5e\xd4\x6e\x5f\xd1\x71\xdd\xcd\x54\xec\xaa\x43\xe0\x7e\xe4\x3d\x57\xc8\xeb\xc7\x5f\x3e\xb6\xe4\xbc\x93\xf1\x68\xdf\xc9\xe9\x11\x7e\xae\xef\x30\x57\xaa\x28\x1f\xa9\xa2\x18\x4f\xaf\x7b\x58\xa5\x24\xf2\xff\xe0\x7e\xfb\x18\xdb\xea\x7f\x77\xf4\x3f\x03\x00\x00\xff\xff\x3b\xae\xc8\x9b\xc0\x07\x00\x00")

func assetsGts1p5PemBytes() ([]byte, error) {
	return bindataRead(
		_assetsGts1p5Pem,
		"assets/gts1p5.pem",
	)
}

func assetsGts1p5Pem() (*asset, error) {
	bytes, err := assetsGts1p5PemBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/gts1p5.pem", size: 1984, mode: os.FileMode(436), modTime: time.Unix(1680679239, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/gts1p5.pem": assetsGts1p5Pem,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"gts1p5.pem": &bintree{assetsGts1p5Pem, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

